name: DevOps CI/CD Pipeline

on:
  push:
    branches: [ main, ci-cd-pipeline ]
  pull_request:
    branches: [ main ]

jobs:
  # Stage 1: Build & Install
  build-and-install:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
      
      - name: Build with Maven
        run: ./mvnw clean install -DskipTests
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  # Stage 2: Lint & Security Scan
  lint-and-security:
    runs-on: ubuntu-latest
    needs: build-and-install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      
      - name: Run Checkstyle
        run: ./mvnw checkstyle:check
      
      - name: Run Spring Format Check
        run: ./mvnw spring-javaformat:validate
      
      - name: Security Scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '0'

  # Stage 3: Test with Database Service
  test:
    runs-on: ubuntu-latest
    needs: lint-and-security
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: petclinic
          POSTGRES_USER: petclinic
          POSTGRES_PASSWORD: petclinic
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
      
      - name: Run Tests
        run: ./mvnw test
        env:
          SPRING_PROFILES_ACTIVE: postgres
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/petclinic
          SPRING_DATASOURCE_USERNAME: petclinic
          SPRING_DATASOURCE_PASSWORD: petclinic

  # Stage 4: Build Docker Image
  build-docker-image:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker Image
        run: |
          docker build -t petclinic-app:${{ github.sha }} .
          docker tag petclinic-app:${{ github.sha }} petclinic-app:latest
      
      - name: Save Docker image
        run: docker save petclinic-app:latest | gzip > petclinic-app.tar.gz
      
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: petclinic-app.tar.gz

  # Stage 5: Deploy (Conditional - only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: build-docker-image
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
      
      - name: Load Docker image
        run: docker load < petclinic-app.tar.gz
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Tag and Push to Docker Hub
        run: |
          docker tag petclinic-app:latest ${{ secrets.DOCKERHUB_USERNAME }}/petclinic-app:latest
          docker tag petclinic-app:latest ${{ secrets.DOCKERHUB_USERNAME }}/petclinic-app:${{ github.sha }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/petclinic-app:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/petclinic-app:${{ github.sha }}
      
      - name: Show Deployment Logs
        run: |
          echo "âœ… Deployment successful!"
          echo "Docker Hub: https://hub.docker.com/r/${{ secrets.DOCKERHUB_USERNAME }}/petclinic-app"
          echo "Image Tags: latest, ${{ github.sha }}"
          echo "Timestamp: $(date -u)"